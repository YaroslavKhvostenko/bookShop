<?php
declare(strict_types=1);
//session_start();
//$date = date("d-m-Y", time());
//echo $date;
//$x = 01 + 2;
//////////////////////////////////////////////////////////////
//$birthdate = [];
//for($i = 1; $i <= 31; $i++) {
//   $birthdate[$i] = $i;
//}
///////////////////////////////////////////
//var_dump($birthdate);
//$date = (int)date('Y');
//var_dump($date);
////////////////////////////////////////////////////
//echo strlen('Yaroslav') . '<br>';
//echo strlen('Ярослав');
//$date = 13011993;
//$data = 'Yaroslav';
//$data = 'Ярослава';
//$data = 'ЯрославаЯрослава';
//$data = 'Ярослаvа';
//$data = 'Y';
//$data = '';
/*function validData($type, $data)
{
    switch ($type) {
        case 'ug':
        case "ul"://user-name. no russian 4-30 characters
            return !pregMatch('/[A-Za-z\)\(_\-]{2,16}/u', $data)  ?
                    pregMatch('/[А-Яа-я\)\(_\-]{2,16}/u', $data) :
                    pregMatch('/[A-Za-z\)\(_\-]{2,16}/u', $data);
//            if (pregMatch('/[A-Za-z\)\(_\-]{2,16}/u', $data) === false) {
//                return pregMatch('/[А-Яа-я\)\(_\-]{2,16}/u', $data) ;
//            }
    }
}

function pregMatch($pattern, $data) {
    preg_match($pattern, $data, $arr);
    return strlen($data) == strlen($arr[0]) ? $arr[0]
        : false;
}

$result = validData('ul', $data);
var_dump($result);*/

//////////////////////////////////////////////////////////////////////////////
/*$result = checkdate(01,13, 1993); // моя дата рождения  true
var_dump($result);;*/
///////
/*$result = checkdate(02,29, 2023); // проверка на высокосный год 29 февраля не в подходящем году
var_dump($result);*/
///////
/*$result = checkdate(01,31, 1959); // проверка на дату вне временной метки(1970 года)
var_dump($result);*/
/////////////////////////////////////////////////////////////////////////////
/*$time = time();
var_dump($time);*/
///////////////////////////////////////////////////////////////////////////
//$date = mktime(0,0,0,01,1,1970);
//var_dump($date);
/*$zeroDate = getdate(0);
print_r($zeroDate);*/
//print_r(getdate($date));
///////////////////////////////////////////////////////////////////////////
/*$birthdate = mktime(0,0,0,07,30,2022);
$futuredatestart = mktime(0,0,0,07,30,2023);
$futuredateend = mktime(0,0,0,07,31,2023);
$resultstart = $futuredatestart - $birthdate;
$resultend = $futuredateend - $birthdate;
$result = $resultend - $resultstart;
echo $result;*/
/////////////////////////////////////////////////////////////////////////////
//$array = [
//    'user_login' => 'beliyniger',
//    'user_pass' => 'zhbr1993',
//    'pass_confirm' => 'zhbr1994',
//    'user_name' => 'Yaroslavочка',
//    'user_birthdate' => '29.02.2021',
//    'user_email' => 'jarik.khvstenk@gmail.com',
//    'user_phone' => '',
//    'user_address' => '',
//];
//
//function validate(array $data)
//{
//    $resultData = [];
//    foreach ($data as $key => $value) {
//        switch ($key) {
//            case 'user_login' :
//                preg_match('/[A-Za-z0-9\)\(_\-]{4,16}/u', $value, $arr);
//                strlen($value) == strlen($arr[0]) ? $resultData[$key] = $arr[0] : $resultData[$key] = false;
//                break;
//            case 'user_pass' :
//                preg_match('/[\w]{4,16}/u', $value, $arr);
//                strlen($value) == strlen($arr[0]) ? $resultData[$key] = md5($arr[0]) : $resultData[$key] = false;
//                break;
//            case 'pass_confirm' :
//                if ($value != $data['user_pass']) {
//                    $resultData[$key] = false;
//                }
//                break;
//            case 'user_name' :
//                if (!preg_match('/[А-Яа-я\)\(_\-]{2,30}/u', $value, $arr)) {
//                    preg_match('/[A-Za-z\)\(_\-]{2,30}/u', $value, $arr);
//                    strlen($value) == strlen($arr[0]) ? $resultData[$key] = $arr[0] : $resultData[$key] = false;
//                } else {
//                    preg_match('/[А-Яа-я\)\(_\-]{2,30}/u', $value, $arr);
//                    strlen($value) == strlen($arr[0]) ? $resultData[$key] = $arr[0] : $resultData[$key] = false;
//                }
//                break;
//            case 'user_birthdate' :
//                $arr = explode(".", $value);
//                checkdate((int) $arr[1], (int) $arr[0], (int) $arr[2]) ? $resultData[$key] = $value : $resultData[$key] = false;
//                break;
//            case 'user_email' :
//                filter_var($value, FILTER_VALIDATE_EMAIL) ? $resultData[$key] = $value : $resultData[$key] = false;
//                break;
//            case 'user_phone' :
//                if (strlen($value) != 0) {
//                    preg_match('/^\+380\d{3}\d{2}\d{2}\d{2}$/', $value, $arr);
//                    strlen($value) == strlen($arr[0]) ? $resultData[$key] = $arr[0] : $resultData[$key] = false;
//                } else {
//                    $resultData[$key] = $value;
//                }
//                break;
//            case 'user_address' :
//                $resultData[$key] = $value;
//        }
//    }
//    return $resultData;
//}
//
//$result = validate($array);
//var_dump($result);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//$arr = ['user_login' => false, 'user_email' => false];
//if (!in_array(false, $arr)) {
//
//}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//$array = [
//    'user_login' => 'beliynочек',
//    'user_pass' => 'zhbr1993',
//    'pass_confirm' => 'zhbr1993',
//    'user_name' => 'Yaroslav',
//    'user_birthdate' => '28.02.2021',
//    'user_email' => 'jarik.khvstenk@gmail.com',
//    'user_phone' => '',
//    'user_address' => ''
//];
//function pregMatchStrLen(string $pattern, string $dataString)
//{
//    preg_match($pattern, $dataString, $arr);
//    return strlen($dataString) == strlen($arr[0]) ?  $arr[0] :  false;
//}
//
//
//function severalLanguagesCheck(string $dataString)
//{
//    if (!pregMatchStrLen('/[А-Яа-я\)\(_\-]{2,30}/u', $dataString)) {
//        return pregMatchStrLen('/[A-Za-z\)\(_\-]{2,30}/u', $dataString);
//    } else {
//        return pregMatchStrLen('/[А-Яа-я\)\(_\-]{2,30}/u', $dataString);
//    }
//}
//
// function validateRegLogFormPostData(array $data): array
//{
//    $resultData = [];
//    foreach ($data as $key => $value) {
//        switch ($key) {
//            case 'user_login' :
//                $resultData[$key] = pregMatchStrLen('/[A-Za-z0-9\)\(_\-]{4,16}/u', $value);
////                    preg_match('/[A-Za-z0-9\)\(_\-]{4,16}/u', $value, $arr);
////                    strlen($value) == strlen($arr[0]) ? $resultData[$key] = $arr[0] : $resultData[$key] = false;//1
//                break;
//            case 'user_pass' :
//                $resultData[$key] = pregMatchStrLen('/[\w]{4,16}/u', $value);
////                    preg_match('/[\w]{4,16}/u', $value, $arr);
////                    strlen($value) == strlen($arr[0]) ? $resultData[$key] = ($arr[0]) : $resultData[$key] = false;//2
//                break;
//            case 'pass_confirm' :
//                if ($value != $data['user_pass']) {
//                    $resultData[$key] = false;
//                }
//                break;
//            case 'user_name' :
//                $resultData[$key] = severalLanguagesCheck($value);
//                break;
//            case 'user_birthdate' :
//                $arr = explode(".", $value);
//                checkdate((int) $arr[1], (int) $arr[0], (int) $arr[2]) ?
//                    $resultData[$key] = $value : $resultData[$key] = false;
//                break;
//            case 'user_email' :
//                filter_var($value, FILTER_VALIDATE_EMAIL) ?
//                    $resultData[$key] = $value : $resultData[$key] = false;
//                break;
//            case 'user_phone' :
//                if ($value != '+380') {
//                    $resultData[$key] = pregMatchStrLen('/^\+380\d{3}\d{2}\d{2}\d{2}$/', $value);
////                        preg_match('/^\+380\d{3}\d{2}\d{2}\d{2}$/', $value, $arr);
////                        strlen($value) == strlen($arr[0]) ? $resultData[$key] = $arr[0] : $resultData[$key] = false; //5
//                }
//                break;
//            case 'user_address' :
//                if(strlen($value) != 0) {
//                    $resultData[$key] = pregMatchStrLen('/.{10,100}/', $value);
////                        preg_match('/.{10,100}/', $value, $arr);
////                        strlen($value) == strlen($arr[0]) ? $resultData[$key] = $arr[0] : $resultData[$key] = false;//6
//                }
//                break;
//            default : $resultData[$key] = false;
//        }
//    }
//    return $resultData;
//}
//
//$result = validateRegLogFormPostData($array);
//var_dump($result);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//$array = [
//    'user_login' => ' ',
//    'user_pass' => ' ',
//    'pass_confirm' => ' ',
//    'user_name' => ' ',
//    'user_birthdate' => ' ',
//    'user_email' => ' ',
//    'user_phone' => ' ',
//    'user_address' => ''
//];
//$arr = ['user_login' => 'yarik'];
//echo count($array);
/////////////////////////////////////////////////////////////////////////////////////////////
//$arr = ['login' => 'beliyniger', 'pass' => 'zhbr1993', 'phone' => 'beliyniger', 'address' => 'beliyniger'];
//$result = isset($arr['login']);
//var_dump($result);
//////////////////////////////////////////////////////////////////////////
//abstract class AbstractValidator
//{
//    protected const TYPE = '';
//    public function execute()
//    {
//        echo 'Hello, let\'s validate ' . static::TYPE . PHP_EOL;
//        $this->drawMethodResponsibility();
//        $this->validate();
//    }
//
//    protected function drawErrorMessage(): void
//    {
//        echo static::TYPE . 'validation is failed' . PHP_EOL;
//    }
//
//    abstract public function validate(?array $data = null): bool;
//
//    abstract protected function drawMethodResponsibility(): void;
//
//}
//
//class FileValidator extends AbstractValidator
//{
//    protected const TYPE = 'file';
//
//    public function validate(?array $data = null): bool
//    {
//        if (!isset($_FILES)) {
//            $this->drawErrorMessage();
//            return false;
//        }
//
//        return true;
//    }
//
//    protected function drawMethodResponsibility(): void
//    {
//        echo 'I am validating ONLY is file uploaded and file size.' . PHP_EOL;
//    }
//}
//
//class DataValidator extends AbstractValidator
//{
//    protected const TYPE = 'data';
//
//    public function validate(?array $data = null): bool
//    {
//        if (null === $data) {
//            $this->drawErrorMessage();
//            return false;
//        }
//
//        return true;
//    }
//
//    protected function drawMethodResponsibility(): void
//    {
//        echo 'I am validating empty data, string length, special characters and so on.'. PHP_EOL;
//    }
//}
//
//class PdfValidator extends FileValidator
//{
//    protected const TYPE = 'pdf';
//
//    public function validate(?array $data = null): bool
//    {
//        $data = ['name' => 'file.pdf'];
//        $validated = parent::validate($data);
//        if ($validated) {
//            $ext = pathinfo($data['name'], PATHINFO_EXTENSION);
//            if ($ext === 'pdf') {
//                echo 'IT IS PDF!' . PHP_EOL;
//                return true;
//            }
//        }
//
//        return false;
//    }
//
//    protected function drawMethodResponsibility(): void
//    {
//        echo 'I am validating file data and is extension PDF or not.'. PHP_EOL;
//    }
//}
//
//$imageValidator = new FileValidator();
//$imageValidator->execute();
//
//$imageValidator = new PdfValidator();
//$imageValidator->execute();
//
//$dataValidator = new DataValidator();
//$dataValidator->execute();
//class A
//{
//    protected array $registrationFields = [];
//
//    protected const REG_FIELDS = [
//        'login',
//        'pass',
//        'pass_confirm',
//        'name',
//        'birthdate',
//        'email'
//    ];
//
//    public function __construct()
//    {
//        $this->registrationFields = self::REG_FIELDS;
//    }
//}
//
//class B extends A
//{
//
//    protected const REG_FIELDS = [
//        'phone',
//        'address',
//        'admin_pass'
//    ];
//
//    public function __construct()
//    {
//        parent::__construct();
//        $this->registrationFields = array_merge($this->registrationFields, self::REG_FIELDS);
//    }
//
//    public function getAllFields()
//    {
//        return $this->registrationFields;
//    }
//}
//
//class C extends B
//{
//
//}

//$A = new A;
//$arr = $A->getFields();
//var_dump($arr);

//$B = new B();
//$arr = $B->getAllFields();
//var_dump($arr);

//$C = new C();
//$arr = $C->getAllFields();
//var_dump($arr);
$string = '/';
$url = null;
$result = $string . $url;
var_dump($result);
echo $string . $url;
